/*
 This file is part of the Computer Breaker project.

    Computer Breaker is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Computer Breaker is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Computer Breaker; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "ExploitsSearcher.hh"
#include "../dom/XPathQueryManager.hh"
#include "../util/Logger.hh"


/**
 * Searches for the exploits associated with a vulnerability
 */
TCollection<Exploit*> *ExploitsSearcher::search(Vulnerability *vulnerability) {
	getLogger().debug("ExploitsSearcher : search(Vulnerability) - begin");
	
	TCollection<Exploit*> *returnedList = new TCollection<Exploit*>();
	
	XPathQueryManager *queryM = new XPathQueryManager(DatabaseReader::dbExploits);
	std::string xpath = "vulnerability[@id='";
	std::ostringstream oss;
	oss << vulnerability->getId();
	xpath += oss.str();
	xpath += "']";
	getLogger().info("ExploitsSearcher : xpath = %s", xpath.c_str());
	returnedList = queryM->getXpathResultExploits(xpath, "/exploits");
	getLogger().info("returnedList->count() = %d", returnedList->count());
	
	getLogger().debug("ExploitsSearcher : search(Vulnerability) - end");
	return returnedList;
}

ExploitsSearcher::ExploitsSearcher() {
	_database = DatabaseReader::dbExploits;
	DatabaseReader dbReader(_database);
	_root = dbReader.getRootElement();
	getLogger().debug("ExploitsSearcher initialized");
}

ExploitsSearcher::~ExploitsSearcher() {
	delete _root;
	getLogger().debug("ExploitsSearcher deleted");
}

TCollection<Exploit*> *ExploitsSearcher::search(TCollection<Vulnerability*> *vulnerabilities) {
	getLogger().debug("ExploitsSearcher : search(TCollection<Vulnerability*>) - begin");
	TCollection<Exploit*> *exploits = new TCollection<Exploit*>();
	// loops on all the vulnerabilities
	for(int i=0; i<vulnerabilities->count(); i++) {
		TCollection<Exploit*> *exp = search(vulnerabilities->operator [](i));
		// adds the new exploits of "exp" (if they exist) in the "exploits" collection
		for(int j=0; j<exp->count(); j++) {
			exploits->add(exp->operator [](j));
		}
	}
	getLogger().debug("ExploitsSearcher : search(TCollection<Vulnerability*>) - end");
	return exploits;
}

int ExploitsSearcher::getNbTotalExploits() {
	getLogger().debug("ExploitsSearcher : getNbTotalExploits() - begin");
	XPathQueryManager queryManager(_database);
	int result = (int)queryManager.getXpathResultDouble("text()", "/exploits/informations/total-exploits");
	getLogger().debug("ExploitsSearcher : getNbTotalExploits() - end");
	return result;
}
