/*
 This file is part of the Computer Breaker project.

    Computer Breaker is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Computer Breaker is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Computer Breaker; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "Vulnerability.hh"

Vulnerability::Vulnerability(){
	_id = "";
	_bugtrack_id = "";
	_cve_id = "";
	_publication_date = "";
	_publisher = "";
	_description = "";
	_type = "";
	_platforms = new TCollection<Platform*>();
	//_platforms->add(new Platform());
}

Vulnerability::Vulnerability(std::string id, std::string bugtrack_id, std::string cve_id, std::string publication_date,
		std::string publisher, std::string description, std::string type,
		TCollection<Platform*> *platforms) {
	_id = id;
	_bugtrack_id = bugtrack_id;
	_cve_id = cve_id;
	_publication_date = publication_date;
	_publisher = publisher;
	_description = description;
	_type = type;
	_platforms = platforms;
}

Vulnerability::Vulnerability(const Vulnerability&) {
}

Vulnerability::~Vulnerability() {
	delete _platforms;
}


std::string Vulnerability::getId() {
	return _id;
}

std::string Vulnerability::getBugtrackId() {
	return _bugtrack_id;
}

std::string Vulnerability::getCveId() {
	return _cve_id;
}

std::string Vulnerability::getPublicationDate() {
	return _publication_date;
}

std::string Vulnerability::getPublisher() {
	return _publisher;
}

std::string Vulnerability::getDescription() {
	return _description;
}

std::string Vulnerability::getType() {
	return _type;
}

TCollection<Platform*> *Vulnerability::getPlatforms() {
	return _platforms;
}

void Vulnerability::setId(std::string id) {
	_id = id;
}

void Vulnerability::setBugtrackId(std::string bugtrackId) {
	_bugtrack_id = bugtrackId;
}

void Vulnerability::setCveId(std::string cveId) {
	_cve_id = cveId;
}

void Vulnerability::setPublicationDate(std::string publicationDate) {
	_publication_date = publicationDate;
}

void Vulnerability::setPublisher(std::string publisher) {
	_publisher = publisher;
}

void Vulnerability::setDescription(std::string description) {
	_description = description;
}

void Vulnerability::setType(std::string type) {
	_type = type;
}

void Vulnerability::setPlatforms(TCollection<Platform*> *platforms) {
	_platforms = platforms;
}

std::string Vulnerability::toString() {
	std::string result = "Vulnerability(";
	result.append("id=\"");
	result.append(_id);
	result.append("\", ");
	result.append("bugTrackId=\"");
	result.append(_bugtrack_id);
	result.append("\", ");
	result.append("cveId=\"");
	result.append(_cve_id);
	result.append("\", ");
	result.append("description=\"");
	result.append(_description.substr(0,20));
	result.append("\", ");
	result.append("#platforms=\"");
	result.append(_platforms->toString());
	result.append("\", ");
	result.append("publicationDate=\"");
	result.append(_publication_date);
	result.append("\", ");
	result.append("publisher=\"");
	result.append(_publisher);
	result.append("\", ");
	result.append("type=\"");
	result.append(_type);
	result.append("\")");
	return result;
}
