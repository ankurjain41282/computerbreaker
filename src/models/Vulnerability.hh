/*
 This file is part of the Computer Breaker project.

    Computer Breaker is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Computer Breaker is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Computer Breaker; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#ifndef VULNERABILITY_HH_
#define VULNERABILITY_HH_

#include <string>
#include "Platform.hh"
#include "../util/TCollection.hh"

/** 
* @class Vulnerability
*
* @brief Vulnerability model class
*
* Detailed description starts here.
*  
* @author CBTeam
* 
*/
class Vulnerability {
	
	private:
	// -----------------------------------------------------------------------
    //  Private Attributes
    // -----------------------------------------------------------------------
	std::string _id;
	std::string _bugtrack_id;
	std::string _cve_id;
	std::string _publication_date;
	std::string _publisher;
	std::string _description;
	std::string _type;
	TCollection<Platform*> *_platforms;    
  
  public:
	// -----------------------------------------------------------------------
    //  Constructors and Detructor
    // -----------------------------------------------------------------------
	/** @name Constructors */
    //@{
    
    /**
      * Construct a Vunerability with Empty attribute
      */
	Vulnerability();
	/** Construct a Vunerability with Predefine element
      *
      * Constructor with the id, the bugtrack_id, the cve_id,
      *  the publication date, the publisher, the description,
      *  the type and the platforms of the vulnerability
      * 
      *
      * @param id The ID of the Vulnerability
      *
      * @param bugtrack_id The bugtrack ID of the Vulnerability   
      *
      * @param cve_id The CVE ID of the Vulnerability   
      * 
      * @param publication_date The date of publication of the Vulnerability
      * 
      * @param publisher The publisher of the Vulnerability
      * 
      * @param description The description of the Vulnerability
      * 
      * @param type The type of The Vulnerability
      * 
      * @param platforms The type of Platforms that encounter this Vulnerability
      */
	Vulnerability(std::string id, std::string bugtrack_id, std::string cve_id, std::string publication_date,
		std::string publisher, std::string description, std::string type,
		TCollection<Platform*> *platforms);
	/** Construct a Vulnerability with a Vulnerability in parameters
      *
      * 
      * @param Vulnerability The Vulnerability
      */	
	Vulnerability(const Vulnerability&);
	//@}
	
	/** @name Destructor */
    //@{
    
    /**
      * Destructor
      */
	~Vulnerability();
	//@}
	
	// -----------------------------------------------------------------------
    //  Getter methods
    // -----------------------------------------------------------------------

    /** @name Getter methods */
    //@{
    
    /** Get the Id of the vulnerability
      *
      * This method returns the id of the vulnerability.
      *
      *
      * @return The id.
      */
	std::string getId();
	
	/** Get the bugtrack's id of the vulnerability
      *
      * This method returns the bugtraq's id of the vulnerability.
      *
      *
      * @return The bugtraq id.
      */
	std::string getBugtrackId();
	
	/** Get the cve's id of the vulnerability
      *
      * This method returns the cve's id of the vulnerability.
      *
      *
      * @return The cve's id.
      */
	std::string getCveId();
	
	/** Get the date of publication of the vulnerability
      *
      * This method returns the date of publication of the vulnerability.
      *
      *
      * @return The date of publication.
      */
	std::string getPublicationDate();
	
	/** Get the publisher of the vulnerability
      *
      * This method returns the publisher of the vulnerability.
      *
      *
      * @return The publisher.
      */
	std::string getPublisher();
	
	/** Get the description of the vulnerability
      *
      * This method returns the description of the vulnerability.
      *
      *
      * @return The description.
      */
	std::string getDescription();
	
	/** Get the type of the vulnerability
      *
      * This method returns the type of the vulnerability.
      *
      *
      * @return The type.
      */
	std::string getType();
	
	/** Get the platforms that encounter this vulnerability
      *
      * This method returns the platforms that encounter this vulnerability.
      *
      *
      * @return The platforms that encounter this vulnerability.
      */
	TCollection<Platform*> *getPlatforms();
	//@}
	
	// -----------------------------------------------------------------------
    //  Setter methods
    // -----------------------------------------------------------------------

    /** @name Setter methods */
    //@{
    
    /** Set the Id of the vulnerability
      *
      * This method allows users to set the Id of the vulnerability.
      *      
      * @param id The value specifying whether id rules should
      *                 be the Id of the vulnerability.
      *
      */
	void setId(std::string id);
	
	/** Set the bugtrack's id of the vulnerability
      *
      * This method allows users to set the bugtrack's id of the vulnerability.
      *      
      * @param bugtrackId The value specifying whether the bugtrack's id rules should
      *                 be the the bugtrack's id of the vulnerability.
      *
      */
	void setBugtrackId(std::string bugtrackId);
	
	/** Set the cve's id of the vulnerability
      *
      * This method allows users to set the cve's id of the vulnerability.
      *      
      * @param cveId The value specifying whether the cve's id rules should
      *                 be the the cve's id of the vulnerability.
      *
      */
	void setCveId(std::string cveId);
	
	/** Set the date of publication of the vulnerability
      *
      * This method allows users to set the date of publication of the vulnerability.
      *      
      * @param publicationDate The value specifying whether the date of publication rules should
      *                 be the the the date of publication of the vulnerability.
      *
      */
	void setPublicationDate(std::string publicationDate);
	
	/** Set the publisher of the vulnerability
      *
      * This method allows users to set the publisher of the vulnerability.
      *      
      * @param publisher The value specifying whether the publisher rules should
      *                 be the the the publisher of the vulnerability.
      *
      */
	void setPublisher(std::string publisher);
	
	/** Set the description of the vulnerability
      *
      * This method allows users to set the description of the vulnerability.
      *      
      * @param description The value specifying whether the description rules should
      *                 be the the the description of the vulnerability.
      *
      */
	void setDescription(std::string description);
	
	/** Set the type of the vulnerability
      *
      * This method allows users to set the type of the vulnerability.
      *      
      * @param type The value specifying whether the type rules should
      *                 be the the the type of the vulnerability.
      *
      */
	void setType(std::string type);
	
	/** Set the platforms that encounter this vulnerability
      *
      * This method allows users to set the platforms that encounter this vulnerability.
      *      
      * @param platforms The value specifying whether the platforms rules should
      *                 be the the the platforms that encounter this vulnerability.
      *
      */
	void setPlatforms(TCollection<Platform*> *platforms);
	//@}
	
	/* public methods */
	std::string toString();
};

#endif /*VULNERABILITY_HH_*/
